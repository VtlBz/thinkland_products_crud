services:

  database:
    image: postgres:15.5-alpine3.19
    container_name: ${COMPOSE_PROJECT_NAME}-db
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data/
    ports:
      - ${DB_PORT}:5432
    networks:
      - lan
    env_file:
      - .env

  textsearch:
    image: elasticsearch:8.12.2
    container_name: ${COMPOSE_PROJECT_NAME}-es
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - es_data:/var/lib/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    networks:
      - lan
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false

  backend:
    image: vtlbz/tl-backend:0.0.1
    container_name: ${COMPOSE_PROJECT_NAME}-srv
    restart: on-failure
    volumes:
      - static_value:/tl_backend/static/
      - media_value:/tl_backend/media/
    networks:
      - lan
    env_file:
      - .env
    depends_on:
      textsearch:
        condition: service_healthy
      database:
        condition: service_healthy

  nginx:
    image: nginx:mainline-alpine-perl
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    restart: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx_configs:/etc/nginx/conf.d:ro
      - static_value:/var/websrv/static/
      - media_value:/var/websrv/media/
      - nginx_value:/var/websrv/nginx_data/
    ports:
      - 80:80
    networks:
      - lan
    depends_on:
      backend:
        condition: service_started

volumes:
  pg_data:
  es_data:
  static_value:
  media_value:
  nginx_value:

networks:
  lan:
    driver: bridge
